/* The following code was generated by JFlex 1.4.1 on 2.3.07 12:52 */

package com.sinergise.geopedia.expr.lexer;

import java.io.Reader;

import com.sinergise.geopedia.core.style.Sym;
import com.sinergise.geopedia.expr.ErrorReporter;

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a>
 * 1.4.1 on 2.3.07 12:52 from the specification file
 * <tt>C:/workspace/Gisopaedia/src/java/com/cosylab/pedia/expr/lexer/lexer.lex</tt>
 */
public class Lexer implements Sym
{

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	/** initial size of the lookahead buffer */
	private static final int ZZ_BUFFERSIZE = 16384;

	/** lexical states */
	public static final int STRING = 1;
	public static final int YYINITIAL = 0;
	public static final int CHAR = 2;

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED = "\11\2\1\5\1\4\1\0\1\5\1\3\16\2\4\0\1\5\1\45"
			+ "\1\22\1\0\1\1\1\34\1\35\1\23\1\61\1\62\1\32\1\31"
			+ "\1\47\1\21\1\17\1\33\1\6\1\14\2\13\4\15\2\7\1\40"
			+ "\1\0\1\42\1\43\1\44\1\37\1\0\3\12\1\63\1\20\1\16"
			+ "\5\1\1\10\13\1\1\11\2\1\1\27\1\24\1\30\1\41\1\1"
			+ "\1\0\1\57\1\64\1\12\1\63\1\55\1\56\5\1\1\52\1\1"
			+ "\1\50\3\1\1\54\1\60\1\53\1\51\2\1\1\11\2\1\1\25"
			+ "\1\36\1\26\1\46\41\2\2\0\4\1\4\0\1\1\2\0\1\2"
			+ "\7\0\1\1\4\0\1\1\5\0\27\1\1\0\37\1\1\0\u013f\1"
			+ "\31\0\162\1\4\0\14\1\16\0\5\1\11\0\1\1\21\0\130\2"
			+ "\5\0\23\2\12\0\1\1\13\0\1\1\1\0\3\1\1\0\1\1"
			+ "\1\0\24\1\1\0\54\1\1\0\46\1\1\0\5\1\4\0\202\1"
			+ "\1\0\4\2\3\0\105\1\1\0\46\1\2\0\2\1\6\0\20\1"
			+ "\41\0\46\1\2\0\1\1\7\0\47\1\11\0\21\2\1\0\27\2"
			+ "\1\0\3\2\1\0\1\2\1\0\2\2\1\0\1\2\13\0\33\1"
			+ "\5\0\3\1\15\0\4\2\14\0\6\2\13\0\32\1\5\0\13\1"
			+ "\16\2\7\0\12\2\4\0\2\1\1\2\143\1\1\0\1\1\10\2"
			+ "\1\0\6\2\2\1\2\2\1\0\4\2\2\1\12\2\3\1\2\0"
			+ "\1\1\17\0\1\2\1\1\1\2\36\1\33\2\2\0\3\1\60\0"
			+ "\46\1\13\2\1\1\u014f\0\3\2\66\1\2\0\1\2\1\1\20\2"
			+ "\2\0\1\1\4\2\3\0\12\1\2\2\2\0\12\2\21\0\3\2"
			+ "\1\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0\1\1"
			+ "\3\0\4\1\2\0\1\2\1\1\7\2\2\0\2\2\2\0\3\2"
			+ "\11\0\1\2\4\0\2\1\1\0\3\1\2\2\2\0\12\2\4\1"
			+ "\15\0\3\2\1\0\6\1\4\0\2\1\2\0\26\1\1\0\7\1"
			+ "\1\0\2\1\1\0\2\1\1\0\2\1\2\0\1\2\1\0\5\2"
			+ "\4\0\2\2\2\0\3\2\13\0\4\1\1\0\1\1\7\0\14\2"
			+ "\3\1\14\0\3\2\1\0\11\1\1\0\3\1\1\0\26\1\1\0"
			+ "\7\1\1\0\2\1\1\0\5\1\2\0\1\2\1\1\10\2\1\0"
			+ "\3\2\1\0\3\2\2\0\1\1\17\0\2\1\2\2\2\0\12\2"
			+ "\1\0\1\1\17\0\3\2\1\0\10\1\2\0\2\1\2\0\26\1"
			+ "\1\0\7\1\1\0\2\1\1\0\5\1\2\0\1\2\1\1\6\2"
			+ "\3\0\2\2\2\0\3\2\10\0\2\2\4\0\2\1\1\0\3\1"
			+ "\4\0\12\2\1\0\1\1\20\0\1\2\1\1\1\0\6\1\3\0"
			+ "\3\1\1\0\4\1\3\0\2\1\1\0\1\1\1\0\2\1\3\0"
			+ "\2\1\3\0\3\1\3\0\10\1\1\0\3\1\4\0\5\2\3\0"
			+ "\3\2\1\0\4\2\11\0\1\2\17\0\11\2\11\0\1\1\7\0"
			+ "\3\2\1\0\10\1\1\0\3\1\1\0\27\1\1\0\12\1\1\0"
			+ "\5\1\4\0\7\2\1\0\3\2\1\0\4\2\7\0\2\2\11\0"
			+ "\2\1\4\0\12\2\22\0\2\2\1\0\10\1\1\0\3\1\1\0"
			+ "\27\1\1\0\12\1\1\0\5\1\2\0\1\2\1\1\7\2\1\0"
			+ "\3\2\1\0\4\2\7\0\2\2\7\0\1\1\1\0\2\1\4\0"
			+ "\12\2\22\0\2\2\1\0\10\1\1\0\3\1\1\0\27\1\1\0"
			+ "\20\1\4\0\6\2\2\0\3\2\1\0\4\2\11\0\1\2\10\0"
			+ "\2\1\4\0\12\2\22\0\2\2\1\0\22\1\3\0\30\1\1\0"
			+ "\11\1\1\0\1\1\2\0\7\1\3\0\1\2\4\0\6\2\1\0"
			+ "\1\2\1\0\10\2\22\0\2\2\15\0\60\1\1\2\2\1\7\2"
			+ "\4\0\10\1\10\2\1\0\12\2\47\0\2\1\1\0\1\1\2\0"
			+ "\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0\7\1\1\0"
			+ "\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0\4\1\1\2"
			+ "\2\1\6\2\1\0\2\2\1\1\2\0\5\1\1\0\1\1\1\0"
			+ "\6\2\2\0\12\2\2\0\2\1\42\0\1\1\27\0\2\2\6\0"
			+ "\12\2\13\0\1\2\1\0\1\2\1\0\1\2\4\0\2\2\10\1"
			+ "\1\0\42\1\6\0\24\2\1\0\2\2\4\1\4\0\10\2\1\0"
			+ "\44\2\11\0\1\2\71\0\42\1\1\0\5\1\1\0\2\1\1\0"
			+ "\7\2\3\0\4\2\6\0\12\2\6\0\6\1\4\2\106\0\46\1"
			+ "\12\0\51\1\7\0\132\1\5\0\104\1\5\0\122\1\6\0\7\1"
			+ "\1\0\77\1\1\0\1\1\1\0\4\1\2\0\7\1\1\0\1\1"
			+ "\1\0\4\1\2\0\47\1\1\0\1\1\1\0\4\1\2\0\37\1"
			+ "\1\0\1\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1"
			+ "\2\0\7\1\1\0\7\1\1\0\27\1\1\0\37\1\1\0\1\1"
			+ "\1\0\4\1\2\0\7\1\1\0\47\1\1\0\23\1\16\0\11\2"
			+ "\56\0\125\1\14\0\u026c\1\2\0\10\1\12\0\32\1\5\0\113\1"
			+ "\3\0\3\1\17\0\15\1\1\0\4\1\3\2\13\0\22\1\3\2"
			+ "\13\0\22\1\2\2\14\0\15\1\1\0\3\1\1\0\2\2\14\0"
			+ "\64\1\40\2\3\0\1\1\3\0\2\1\1\2\2\0\12\2\41\0"
			+ "\3\2\2\0\12\2\6\0\130\1\10\0\51\1\1\2\126\0\35\1"
			+ "\3\0\14\2\4\0\14\2\12\0\12\2\36\1\2\0\5\1\u038b\0"
			+ "\154\1\224\0\234\1\4\0\132\1\6\0\26\1\2\0\6\1\2\0"
			+ "\46\1\2\0\6\1\2\0\10\1\1\0\1\1\1\0\1\1\1\0"
			+ "\1\1\1\0\37\1\2\0\65\1\1\0\7\1\1\0\1\1\3\0"
			+ "\3\1\1\0\7\1\3\0\4\1\2\0\6\1\4\0\15\1\5\0"
			+ "\3\1\1\0\7\1\17\0\4\2\32\0\5\2\20\0\2\1\23\0"
			+ "\1\1\13\0\4\2\6\0\6\2\1\0\1\1\15\0\1\1\40\0"
			+ "\22\1\36\0\15\2\4\0\1\2\3\0\6\2\27\0\1\1\4\0"
			+ "\1\1\2\0\12\1\1\0\1\1\3\0\5\1\6\0\1\1\1\0"
			+ "\1\1\1\0\1\1\1\0\4\1\1\0\3\1\1\0\7\1\3\0"
			+ "\3\1\5\0\5\1\26\0\44\1\u0e81\0\3\1\31\0\11\1\6\2"
			+ "\1\0\5\1\2\0\5\1\4\0\126\1\2\0\2\2\2\0\3\1"
			+ "\1\0\137\1\5\0\50\1\4\0\136\1\21\0\30\1\70\0\20\1"
			+ "\u0200\0\u19b6\1\112\0\u51a6\1\132\0\u048d\1\u0773\0\u2ba4\1\u215c\0\u012e\1"
			+ "\2\0\73\1\225\0\7\1\14\0\5\1\5\0\1\1\1\2\12\1"
			+ "\1\0\15\1\1\0\5\1\1\0\1\1\1\0\2\1\1\0\2\1"
			+ "\1\0\154\1\41\0\u016b\1\22\0\100\1\2\0\66\1\50\0\15\1"
			+ "\3\0\20\2\20\0\4\2\17\0\2\1\30\0\3\1\31\0\1\1"
			+ "\6\0\5\1\1\0\207\1\2\0\1\2\4\0\1\1\13\0\12\2"
			+ "\7\0\32\1\4\0\1\1\1\0\32\1\12\0\132\1\3\0\6\1"
			+ "\2\0\6\1\2\0\6\1\2\0\3\1\3\0\2\1\3\0\2\1" + "\22\0\3\2\4\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\3\0\1\1\1\2\2\3\2\4\1\5\1\6\1\7"
			+ "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"
			+ "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"
			+ "\1\30\1\31\1\32\1\33\3\2\1\34\1\35\1\36"
			+ "\2\37\1\40\1\0\1\41\2\42\1\43\1\41\1\44"
			+ "\1\45\1\46\1\0\3\44\1\47\1\45\1\0\1\50"
			+ "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"
			+ "\1\61\3\2\1\62\2\63\1\64\1\65\1\66\1\67"
			+ "\1\70\1\71\1\72\1\73\1\0\1\74\1\75\4\0"
			+ "\1\75\6\0\1\76\2\77\2\44\1\45\1\0\1\100"
			+ "\3\2\1\63\1\101\1\102\1\0\1\103\1\104\1\105"
			+ "\1\106\1\107\1\110\1\111\1\112\1\113\1\77\2\44"
			+ "\1\114\1\115\1\2\1\77\2\44\1\116\1\77\2\44"
			+ "\1\77\2\44\1\77\2\44\1\77\2\44\1\77\2\44"
			+ "\1\0\2\44\1\0\2\44\1\0\2\44\1\0\2\44"
			+ "\1\0\2\44\1\0\2\44\1\0\1\44\1\45\1\0" + "\5\45";

	private static int[] zzUnpackAction()
	{
		int[] result = new int[171];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\237\0\u013e"
			+ "\0\u0173\0\u01a8\0\u01dd\0\237\0\237\0\237\0\237\0\237"
			+ "\0\237\0\237\0\237\0\237\0\237\0\u0212\0\u0247\0\237"
			+ "\0\237\0\237\0\u027c\0\u02b1\0\u02e6\0\u031b\0\237\0\237"
			+ "\0\u0350\0\u0385\0\u03ba\0\237\0\237\0\u03ef\0\u0424\0\237"
			+ "\0\237\0\u0459\0\u048e\0\u04c3\0\237\0\u04f8\0\u052d\0\u0562"
			+ "\0\u0597\0\237\0\u05cc\0\u0601\0\u0636\0\u066b\0\237\0\u06a0"
			+ "\0\u06d5\0\237\0\237\0\237\0\237\0\237\0\237\0\237"
			+ "\0\237\0\u070a\0\237\0\u073f\0\u0774\0\u07a9\0\237\0\u07de"
			+ "\0\u0813\0\237\0\237\0\237\0\237\0\237\0\237\0\237"
			+ "\0\237\0\u04f8\0\u04f8\0\u04f8\0\u0848\0\u087d\0\u08b2\0\u08e7"
			+ "\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\237"
			+ "\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\237\0\u0bcd"
			+ "\0\u0c02\0\u0c37\0\237\0\u04f8\0\u04f8\0\u0c6c\0\u04f8\0\u04f8"
			+ "\0\u04f8\0\u04f8\0\u04f8\0\u04f8\0\u04f8\0\u04f8\0\237\0\u0ca1"
			+ "\0\u0cd6\0\u0d0b\0\324\0\324\0\u0d40\0\u0d75\0\u0daa\0\u0ddf"
			+ "\0\324\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52"
			+ "\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa"
			+ "\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2"
			+ "\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a"
			+ "\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u151e\0\u1553\0\u1588\0\u15bd"
			+ "\0\u15f2\0\u1627\0\u165c";

	private static int[] zzUnpackRowMap()
	{
		int[] result = new int[171];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 = "\1\4\1\5\1\4\1\6\2\7\1\10\1\11\3\5"
			+ "\3\11\1\5\1\12\1\5\1\13\1\14\1\15\1\4"
			+ "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"
			+ "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"
			+ "\1\36\1\37\1\40\1\41\2\5\1\42\2\5\1\43"
			+ "\2\5\1\44\1\45\2\5\3\46\1\47\1\50\15\46"
			+ "\1\51\1\46\1\52\40\46\3\53\1\54\1\55\16\53"
			+ "\1\56\1\57\40\53\66\0\2\5\3\0\11\5\1\0"
			+ "\1\5\27\0\11\5\2\0\2\5\4\0\1\7\66\0"
			+ "\1\60\1\61\1\62\1\63\1\0\1\64\1\65\1\66"
			+ "\1\67\1\70\1\71\31\0\1\62\2\0\1\71\1\67"
			+ "\4\0\1\72\7\0\2\11\1\62\2\0\3\11\1\67"
			+ "\1\70\1\71\31\0\1\62\2\0\1\71\1\67\4\0"
			+ "\1\72\7\0\2\70\3\0\3\70\113\0\1\73\55\0"
			+ "\1\74\65\0\1\75\70\0\1\76\1\77\64\0\1\100"
			+ "\64\0\1\101\1\102\63\0\1\103\22\0\2\5\3\0"
			+ "\11\5\1\0\1\5\27\0\1\5\1\104\7\5\2\0"
			+ "\2\5\1\0\2\5\3\0\11\5\1\0\1\5\27\0"
			+ "\4\5\1\105\4\5\2\0\2\5\1\0\2\5\3\0"
			+ "\11\5\1\0\1\5\27\0\7\5\1\106\1\5\2\0"
			+ "\2\5\3\46\2\0\15\46\1\0\1\46\1\0\40\46"
			+ "\4\0\1\50\60\0\4\107\1\0\1\107\1\110\4\107"
			+ "\2\110\1\111\4\107\1\112\1\113\1\114\23\107\1\115"
			+ "\2\107\1\116\1\117\1\107\1\120\5\107\1\121\4\122"
			+ "\1\0\16\122\1\123\45\122\1\55\16\122\1\124\45\122"
			+ "\1\0\16\122\1\124\41\122\4\125\1\0\1\125\1\126"
			+ "\4\125\2\126\1\127\4\125\1\130\1\131\1\132\23\125"
			+ "\1\133\2\125\1\134\1\135\1\125\1\136\5\125\1\137"
			+ "\6\0\1\60\1\61\1\140\2\0\1\64\1\65\1\66"
			+ "\1\67\1\70\1\71\31\0\1\140\2\0\1\71\1\67"
			+ "\4\0\1\72\7\0\2\61\3\0\3\61\1\67\1\70"
			+ "\1\71\34\0\1\71\1\67\4\0\1\72\7\0\1\141"
			+ "\1\142\2\0\5\142\1\0\1\142\34\0\3\142\3\0"
			+ "\2\142\6\0\1\143\1\61\1\140\2\0\3\143\1\67"
			+ "\1\70\1\71\31\0\1\140\2\0\1\71\1\67\4\0"
			+ "\1\72\7\0\1\66\1\61\1\140\2\0\3\66\1\67"
			+ "\1\70\1\71\31\0\1\140\2\0\1\71\1\67\4\0"
			+ "\1\72\7\0\1\144\1\61\1\140\2\0\3\144\1\67"
			+ "\1\70\1\71\31\0\1\140\2\0\1\71\1\67\4\0"
			+ "\1\72\7\0\2\70\3\0\3\70\1\67\1\0\1\71"
			+ "\34\0\1\71\1\67\4\0\1\72\7\0\2\145\3\0"
			+ "\3\145\3\0\1\146\7\0\1\146\77\0\1\147\21\0"
			+ "\2\5\3\0\11\5\1\0\1\5\27\0\2\5\1\150"
			+ "\6\5\2\0\2\5\1\0\2\5\3\0\11\5\1\0"
			+ "\1\5\27\0\1\5\1\151\7\5\2\0\2\5\1\0"
			+ "\2\5\3\0\11\5\1\0\1\5\27\0\2\5\1\152"
			+ "\6\5\2\0\2\5\6\0\1\111\4\0\3\111\55\0"
			+ "\1\153\4\0\3\153\47\0\4\122\1\0\16\122\1\154"
			+ "\45\122\1\0\1\122\1\127\4\122\3\127\5\122\1\155"
			+ "\45\122\1\0\1\122\1\156\4\122\3\156\5\122\1\155"
			+ "\45\122\1\0\16\122\1\157\45\122\1\0\16\122\1\160"
			+ "\45\122\1\0\16\122\1\161\45\122\1\0\16\122\1\162"
			+ "\45\122\1\0\16\122\1\163\45\122\1\0\16\122\1\164"
			+ "\45\122\1\0\16\122\1\165\45\122\1\0\16\122\1\166"
			+ "\41\122\6\0\1\141\1\142\1\167\1\0\5\142\1\0"
			+ "\1\142\31\0\1\167\2\0\3\142\3\0\2\142\6\0"
			+ "\2\170\1\167\1\0\5\170\1\0\1\170\31\0\1\167"
			+ "\2\0\3\170\3\0\2\170\6\0\1\171\1\61\1\140"
			+ "\2\0\3\171\1\67\1\70\1\71\31\0\1\140\2\0"
			+ "\1\71\1\67\4\0\1\72\7\0\1\172\1\61\1\140"
			+ "\2\0\3\172\1\67\1\70\1\71\31\0\1\140\2\0"
			+ "\1\71\1\67\4\0\1\72\7\0\2\145\3\0\3\145"
			+ "\1\67\37\0\1\67\4\0\1\72\7\0\2\145\3\0"
			+ "\3\145\50\0\2\5\3\0\11\5\1\0\1\5\27\0"
			+ "\2\5\1\173\6\5\2\0\2\5\1\0\2\5\3\0"
			+ "\11\5\1\0\1\5\27\0\5\5\1\174\3\5\2\0"
			+ "\2\5\1\0\2\5\3\0\11\5\1\0\1\5\27\0"
			+ "\10\5\1\175\2\0\2\5\4\122\1\0\16\122\1\155"
			+ "\41\122\6\0\2\176\1\167\1\0\5\176\1\0\1\176"
			+ "\31\0\1\167\2\0\3\176\3\0\2\176\6\0\1\177"
			+ "\1\61\1\140\2\0\3\177\1\67\1\70\1\71\31\0"
			+ "\1\140\2\0\1\71\1\67\4\0\1\72\7\0\1\200"
			+ "\1\61\1\140\2\0\3\200\1\67\1\70\1\71\31\0"
			+ "\1\140\2\0\1\71\1\67\4\0\1\72\2\0\2\5"
			+ "\3\0\11\5\1\0\1\5\27\0\5\5\1\201\3\5"
			+ "\2\0\2\5\6\0\2\202\1\167\1\0\5\202\1\0"
			+ "\1\202\31\0\1\167\2\0\3\202\3\0\2\202\6\0"
			+ "\1\203\1\61\1\140\2\0\3\203\1\67\1\70\1\71"
			+ "\31\0\1\140\2\0\1\71\1\67\4\0\1\72\7\0"
			+ "\1\204\1\61\1\140\2\0\3\204\1\67\1\70\1\71"
			+ "\31\0\1\140\2\0\1\71\1\67\4\0\1\72\7\0"
			+ "\2\205\1\167\1\0\5\205\1\0\1\205\31\0\1\167"
			+ "\2\0\3\205\3\0\2\205\6\0\1\206\1\61\1\140"
			+ "\2\0\3\206\1\67\1\70\1\71\31\0\1\140\2\0"
			+ "\1\71\1\67\4\0\1\72\7\0\1\207\1\61\1\140"
			+ "\2\0\3\207\1\67\1\70\1\71\31\0\1\140\2\0"
			+ "\1\71\1\67\4\0\1\72\7\0\2\210\1\167\1\0"
			+ "\5\210\1\0\1\210\31\0\1\167\2\0\3\210\3\0"
			+ "\2\210\6\0\1\211\1\61\1\140\2\0\3\211\1\67"
			+ "\1\70\1\71\31\0\1\140\2\0\1\71\1\67\4\0"
			+ "\1\72\7\0\1\212\1\61\1\140\2\0\3\212\1\67"
			+ "\1\70\1\71\31\0\1\140\2\0\1\71\1\67\4\0"
			+ "\1\72\7\0\2\213\1\167\1\0\5\213\1\0\1\213"
			+ "\31\0\1\167\2\0\3\213\3\0\2\213\6\0\1\214"
			+ "\1\61\1\140\2\0\3\214\1\67\1\70\1\71\31\0"
			+ "\1\140\2\0\1\71\1\67\4\0\1\72\7\0\1\215"
			+ "\1\61\1\140\2\0\3\215\1\67\1\70\1\71\31\0"
			+ "\1\140\2\0\1\71\1\67\4\0\1\72\7\0\2\216"
			+ "\1\167\1\0\5\216\1\0\1\216\31\0\1\167\2\0"
			+ "\3\216\3\0\2\216\6\0\1\217\1\61\1\140\2\0"
			+ "\3\217\1\67\1\70\1\71\31\0\1\140\2\0\1\71"
			+ "\1\67\4\0\1\72\7\0\1\220\1\61\1\140\2\0"
			+ "\3\220\1\67\1\70\1\71\31\0\1\140\2\0\1\71"
			+ "\1\67\4\0\1\72\7\0\2\221\1\167\1\0\5\221"
			+ "\1\0\1\221\31\0\1\167\2\0\3\221\3\0\2\221"
			+ "\6\0\1\222\1\61\1\140\2\0\3\222\1\67\1\70"
			+ "\1\71\31\0\1\140\2\0\1\71\1\67\4\0\1\72"
			+ "\7\0\1\223\1\61\1\140\2\0\3\223\1\67\1\70"
			+ "\1\71\31\0\1\140\2\0\1\71\1\67\4\0\1\72"
			+ "\7\0\2\224\1\167\1\0\5\224\1\0\1\224\31\0"
			+ "\1\167\2\0\3\224\3\0\2\224\6\0\1\225\1\61"
			+ "\1\140\2\0\3\225\1\67\1\70\1\71\31\0\1\140"
			+ "\2\0\1\71\1\67\4\0\1\72\7\0\1\226\1\61"
			+ "\1\140\2\0\3\226\1\67\1\70\1\71\31\0\1\140"
			+ "\2\0\1\71\1\67\4\0\1\72\7\0\2\227\1\167"
			+ "\1\0\5\227\1\0\1\227\31\0\1\167\2\0\3\227"
			+ "\3\0\2\227\6\0\1\230\1\61\1\140\2\0\3\230"
			+ "\1\67\1\70\1\71\31\0\1\140\2\0\1\71\1\67"
			+ "\4\0\1\72\7\0\1\231\1\61\1\140\2\0\3\231"
			+ "\1\67\1\70\1\71\31\0\1\140\2\0\1\71\1\67"
			+ "\4\0\1\72\7\0\2\232\1\167\1\0\5\232\1\0"
			+ "\1\232\31\0\1\167\2\0\3\232\3\0\2\232\6\0"
			+ "\1\233\1\61\1\140\2\0\3\233\1\67\1\70\1\71"
			+ "\31\0\1\140\2\0\1\71\1\67\4\0\1\72\7\0"
			+ "\1\234\1\61\1\140\2\0\3\234\1\67\1\70\1\71"
			+ "\31\0\1\140\2\0\1\71\1\67\4\0\1\72\7\0"
			+ "\2\235\1\167\1\0\5\235\1\0\1\235\31\0\1\167"
			+ "\2\0\3\235\3\0\2\235\6\0\1\236\1\61\1\140"
			+ "\2\0\3\236\1\67\1\70\1\71\31\0\1\140\2\0"
			+ "\1\71\1\67\4\0\1\72\7\0\1\237\1\61\1\140"
			+ "\2\0\3\237\1\67\1\70\1\71\31\0\1\140\2\0"
			+ "\1\71\1\67\4\0\1\72\7\0\2\240\1\167\1\0"
			+ "\5\240\1\0\1\240\31\0\1\167\2\0\3\240\3\0"
			+ "\2\240\6\0\1\241\1\61\1\140\2\0\3\241\1\67"
			+ "\1\70\1\71\31\0\1\140\2\0\1\71\1\67\4\0"
			+ "\1\72\7\0\1\242\1\61\1\140\2\0\3\242\1\67"
			+ "\1\70\1\71\31\0\1\140\2\0\1\71\1\67\4\0"
			+ "\1\72\7\0\2\243\1\167\1\0\5\243\1\0\1\243"
			+ "\31\0\1\167\2\0\3\243\3\0\2\243\6\0\1\244"
			+ "\1\61\1\140\2\0\3\244\1\67\1\70\1\71\31\0"
			+ "\1\140\2\0\1\71\1\67\4\0\1\72\7\0\1\245"
			+ "\1\61\1\140\2\0\3\245\1\67\1\70\1\71\31\0"
			+ "\1\140\2\0\1\71\1\67\4\0\1\72\7\0\2\246"
			+ "\1\167\1\0\5\246\1\0\1\246\31\0\1\167\2\0"
			+ "\3\246\3\0\2\246\6\0\1\247\1\61\1\140\2\0"
			+ "\3\247\1\67\1\70\1\71\31\0\1\140\2\0\1\71"
			+ "\1\67\4\0\1\72\11\0\1\167\41\0\1\167\20\0"
			+ "\1\250\1\61\1\140\2\0\3\250\1\67\1\70\1\71"
			+ "\31\0\1\140\2\0\1\71\1\67\4\0\1\72\7\0"
			+ "\1\251\1\61\1\140\2\0\3\251\1\67\1\70\1\71"
			+ "\31\0\1\140\2\0\1\71\1\67\4\0\1\72\7\0"
			+ "\1\252\1\61\1\140\2\0\3\252\1\67\1\70\1\71"
			+ "\31\0\1\140\2\0\1\71\1\67\4\0\1\72\7\0"
			+ "\1\253\1\61\1\140\2\0\3\253\1\67\1\70\1\71"
			+ "\31\0\1\140\2\0\1\71\1\67\4\0\1\72\7\0"
			+ "\2\61\1\140\2\0\3\61\1\67\1\70\1\71\31\0"
			+ "\1\140\2\0\1\71\1\67\4\0\1\72\1\0";

	private static int[] zzUnpackTrans()
	{
		int[] result = new int[5777];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
			"Unkown internal scanner error", "Error: could not match input",
			"Error: pushback value was too large" };

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\3\0\1\11\2\1\1\11\4\1\12\11\2\1\3\11"
			+ "\4\1\2\11\3\1\2\11\2\1\2\11\1\0\2\1"
			+ "\1\11\4\1\1\11\1\0\3\1\1\11\1\1\1\0"
			+ "\10\11\1\1\1\11\3\1\1\11\2\1\10\11\1\0"
			+ "\2\1\4\0\1\1\6\0\1\11\5\1\1\0\1\11"
			+ "\3\1\1\11\2\1\1\0\10\1\1\11\31\1\1\0"
			+ "\2\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"
			+ "\2\1\1\0\2\1\1\0\2\1\1\0\5\1";

	private static int[] zzUnpackAttribute()
	{
		int[] result = new int[171];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/** the input device */
	private java.io.Reader zzReader;

	/** the current state of the DFA */
	private int zzState;

	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is the source of
	 * the yytext() string
	 */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the textposition at the last state to be included in yytext */
	private int zzPushbackPos;

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read from
	 * input
	 */
	private int zzEndRead;

	/** number of newlines encountered up to the start of the matched text */
	private int yyline;

	/**
	 * the number of characters from the last newline up to the start of the
	 * matched text
	 */
	private int yycolumn;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;

	/* user code: */
	public Lexer(Reader reader, ErrorReporter err)
	{
		this(reader);
		this.err = err;
	}

	ErrorReporter err;
	StringBuffer sb = new StringBuffer();
	StringBuffer rawsb = new StringBuffer();
	int stringState = 0;

	private void intoString()
	{
		stringState = yystate();
		yybegin(STRING);
	}

	private void intoChar()
	{
		stringState = yystate();
		yybegin(CHAR);
	}

	private void fromStringChar()
	{
		yybegin(stringState);
	}

	private void reportError(String msg)
	{
		err.error(msg, new Token(0, yyline, yycolumn));
	}

	private Token tok(int tt)
	{
		return new Token(tt, yyline, yycolumn);
	}

	private Token tok(int tt, String txt)
	{
		return new Token(tt, txt, yyline, yycolumn);
	}

	private Token strtok(String txt)
	{
		return new Token(LITERAL_STRING, txt, yyline, yycolumn);
	}

	private Token tok(int tt, Character c)
	{
		return new Token(tt, c, yyline, yycolumn);
	}

	private Token tok(int tt, Integer i)
	{
		return new Token(tt, i, yyline, yycolumn);
	}

	private Token tok(int tt, Float f)
	{
		return new Token(tt, f, yyline, yycolumn);
	}

	private Token tok(int tt, Double d)
	{
		return new Token(tt, d, yyline, yycolumn);
	}

	private Token tok(int tt, Long l)
	{
		return new Token(tt, l, yyline, yycolumn);
	}

	private long parseLong(int start, int end, int radix)
	{
		long result = 0;
		long digit;

		for (int i = start; i < end; i++) {
			digit = Character.digit(yycharat(i), radix);
			result *= radix;
			result += digit;
		}

		return result;
	}

	int numParens = 0;
	boolean fromStmts = false;

	/**
	 * Creates a new scanner There is also a java.io.InputStream version of this
	 * constructor.
	 * 
	 * @param in
	 *            the java.io.Reader to read input from.
	 */
	public Lexer(java.io.Reader in)
	{
		this.zzReader = in;
	}

	/**
	 * Creates a new scanner. There is also java.io.Reader version of this
	 * constructor.
	 * 
	 * @param in
	 *            the java.io.Inputstream to read input from.
	 */
	public Lexer(java.io.InputStream in)
	{
		this(new java.io.InputStreamReader(in));
	}

	/**
	 * Unpacks the compressed character translation table.
	 * 
	 * @param packed
	 *            the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed)
	{
		char[] map = new char[0x10000];
		int i = 0; /* index in packed string */
		int j = 0; /* index in unpacked array */
		while (i < 1766) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do
				map[j++] = value;
			while (--count > 0);
		}
		return map;
	}

	/**
	 * Refills the input buffer.
	 * 
	 * @return <code>false</code>, iff there was new input.
	 * 
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException
	{

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead
					- zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzPushbackPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length) {
			/* if not: blow it up */
			char newBuffer[] = new char[zzCurrentPos * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
		}

		/* finally: fill the buffer with new input */
		int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length
				- zzEndRead);

		if (numRead < 0) {
			return true;
		} else {
			zzEndRead += numRead;
			return false;
		}
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException
	{
		zzAtEOF = true; /* indicate end of file */
		zzEndRead = zzStartRead; /* invalidate buffer */

		if (zzReader != null)
			zzReader.close();
	}

	/**
	 * Resets the scanner to read from a new input stream. Does not close the
	 * old reader.
	 * 
	 * All internal variables are reset, the old input stream <b>cannot</b> be
	 * reused (internal buffer is discarded and lost). Lexical state is set to
	 * <tt>ZZ_INITIAL</tt>.
	 * 
	 * @param reader
	 *            the new input stream
	 */
	public final void yyreset(java.io.Reader reader)
	{
		zzReader = reader;
		zzAtEOF = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
		yyline = yycolumn = 0;
		zzLexicalState = YYINITIAL;
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate()
	{
		return zzLexicalState;
	}

	/**
	 * Enters a new lexical state
	 * 
	 * @param newState
	 *            the new lexical state
	 */
	public final void yybegin(int newState)
	{
		zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext()
	{
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 * 
	 * It is equivalent to yytext().charAt(pos), but faster
	 * 
	 * @param pos
	 *            the position of the character to fetch. A value from 0 to
	 *            yylength()-1.
	 * 
	 * @return the character at position pos
	 */
	public final char yycharat(int pos)
	{
		return zzBuffer[zzStartRead + pos];
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength()
	{
		return zzMarkedPos - zzStartRead;
	}

	/**
	 * Reports an error that occured while scanning.
	 * 
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and
	 * a match-all fallback rule) this method will only be called with things
	 * that "Can't Possibly Happen". If this method is called, something is
	 * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
	 * 
	 * Usual syntax/scanner level error handling should be done in error
	 * fallback rules.
	 * 
	 * @param errorCode
	 *            the code of the errormessage to display
	 */
	private void zzScanError(int errorCode)
	{
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * 
	 * They will be read again by then next call of the scanning method
	 * 
	 * @param number
	 *            the number of characters to be read again. This number must
	 *            not be greater than yylength()!
	 */
	public void yypushback(int number)
	{
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of
	 * input is encountered or an I/O-Error occurs.
	 * 
	 * @return the next token
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	public Token yylex() throws java.io.IOException
	{
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			boolean zzR = false;
			for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {
				switch (zzBufferL[zzCurrentPosL]) {
				case '\u000B':
				case '\u000C':
				case '\u0085':
				case '\u2028':
				case '\u2029':
					yyline++;
					yycolumn = 0;
					zzR = false;
					break;
				case '\r':
					yyline++;
					yycolumn = 0;
					zzR = true;
					break;
				case '\n':
					if (zzR)
						zzR = false;
					else {
						yyline++;
						yycolumn = 0;
					}
					break;
				default:
					zzR = false;
					yycolumn++;
				}
			}

			if (zzR) {
				// peek one character ahead if it is \n (if we have counted one
				// line too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL)
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				else if (zzAtEOF)
					zzPeek = false;
				else {
					boolean eof = zzRefill();
					zzEndReadL = zzEndRead;
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof)
						zzPeek = false;
					else
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				}
				if (zzPeek)
					yyline--;
			}
			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = zzLexicalState;

			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL)
						zzInput = zzBufferL[zzCurrentPosL++];
					else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = zzBufferL[zzCurrentPosL++];
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1)
						break zzForAction;
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8)
							break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
			case 43: {
				return tok(BARBAR);
			}
			case 79:
				break;
			case 35: {
				fromStringChar();
				reportError("Empty character");
				return tok(LITERAL_CHAR, new Character((char) 0));
			}
			case 80:
				break;
			case 51: {
				char val = (char) Integer.parseInt(yytext().substring(1), 8);
				sb.append(val);
				rawsb.append(yytext());
			}
			case 81:
				break;
			case 73: {
				fromStringChar();
				return tok(LITERAL_CHAR, new Character('\f'));
			}
			case 82:
				break;
			case 58: {
				sb.append('\f');
				rawsb.append(yytext());
			}
			case 83:
				break;
			case 64: {
				return tok(SHRU);
			}
			case 84:
				break;
			case 45: {
				return tok(LESS_EQ);
			}
			case 85:
				break;
			case 20: {
				return tok(COLON);
			}
			case 86:
				break;
			case 26: {
				return tok(TILDE);
			}
			case 87:
				break;
			case 5: {
				return tok(DOT);
			}
			case 88:
				break;
			case 7: {
				intoString();
				sb.setLength(0);
				rawsb.setLength(0);
			}
			case 89:
				break;
			case 55: {
				sb.append('\n');
				rawsb.append(yytext());
			}
			case 90:
				break;
			case 48: {
				return tok(SHR);
			}
			case 91:
				break;
			case 49: {
				return tok(NOT_EQUALS);
			}
			case 92:
				break;
			case 63: {
				return tok(LITERAL_INT, new Integer((int) parseLong(2,
						yylength(), 16)));
			}
			case 93:
				break;
			case 18: {
				return tok(BAR);
			}
			case 94:
				break;
			case 15: {
				return tok(SLASH);
			}
			case 95:
				break;
			case 33: {
				fromStringChar();
				reportError("Missing ' after '" + yytext());
				return tok(LITERAL_CHAR, new Character(yytext().charAt(0)));
			}
			case 96:
				break;
			case 53: {
				sb.append('\'');
				rawsb.append(yytext());
			}
			case 97:
				break;
			case 27: {
				return tok(COMMA);
			}
			case 98:
				break;
			case 57: {
				sb.append('\r');
				rawsb.append(yytext());
			}
			case 99:
				break;
			case 44: {
				return tok(SHL);
			}
			case 100:
				break;
			case 29: {
				return tok(RPAREN);
			}
			case 101:
				break;
			case 54: {
				sb.append('\\');
				rawsb.append(yytext());
			}
			case 102:
				break;
			case 1: {
				reportError("Unknown character <" + yytext() + ">");
			}
			case 103:
				break;
			case 23: {
				return tok(ASSIGN);
			}
			case 104:
				break;
			case 71: {
				fromStringChar();
				return tok(LITERAL_CHAR, new Character('\t'));
			}
			case 105:
				break;
			case 40: {
				return tok(LITERAL_FLOAT, new Double(yytext().substring(0,
						yylength() - 1)));
			}
			case 106:
				break;
			case 14: {
				return tok(STAR);
			}
			case 107:
				break;
			case 19: {
				return tok(QUESTION);
			}
			case 108:
				break;
			case 4: {
				return tok(LITERAL_INT, new Integer(yytext()));
			}
			case 109:
				break;
			case 46: {
				return tok(EQUALS);
			}
			case 110:
				break;
			case 66: {
				fromStringChar();
				int val = Integer.parseInt(yytext()
						.substring(1, yylength() - 1), 8);
				return tok(LITERAL_CHAR, new Character((char) val));
			}
			case 111:
				break;
			case 70: {
				fromStringChar();
				return tok(LITERAL_CHAR, new Character('\n'));
			}
			case 112:
				break;
			case 8: {
				intoChar();
			}
			case 113:
				break;
			case 47: {
				return tok(GREATER_EQ);
			}
			case 114:
				break;
			case 28: {
				return tok(LPAREN);
			}
			case 115:
				break;
			case 50: {
				reportError("Illegal escape sequence \"" + yytext() + "\"");
				sb.append(yytext());
				rawsb.append(yytext());
			}
			case 116:
				break;
			case 10: {
				return tok(RCURLY);
			}
			case 117:
				break;
			case 24: {
				return tok(GREATER);
			}
			case 118:
				break;
			case 22: {
				return tok(LESS);
			}
			case 119:
				break;
			case 39: {
				return tok(LITERAL_FLOAT, new Float(yytext().substring(0,
						yylength() - 1)));
			}
			case 120:
				break;
			case 34: {
				fromStringChar();
				reportError("Unterminated character literal at end of line");
				return tok(LITERAL_CHAR, new Character((char) 0));
			}
			case 121:
				break;
			case 65: {
				fromStringChar();
				reportError("Illegal escape sequence \"" + yytext() + "\"");
				return tok(LITERAL_CHAR, new Character(yytext().charAt(1)));
			}
			case 122:
				break;
			case 42: {
				return tok(AMPAMP);
			}
			case 123:
				break;
			case 38: {
				return tok(LITERAL_INT, new Long(yytext().substring(0,
						yylength() - 1)));
			}
			case 124:
				break;
			case 16: {
				return tok(PERCENT);
			}
			case 125:
				break;
			case 31: {
				reportError("Unterminated string at end of line");
				fromStringChar();
				return strtok(sb.toString());
			}
			case 126:
				break;
			case 60: {
				fromStringChar();
				return tok(LITERAL_CHAR, new Character(yytext().charAt(0)));
			}
			case 127:
				break;
			case 56: {
				sb.append('\t');
				rawsb.append(yytext());
			}
			case 128:
				break;
			case 17: {
				return tok(AMP);
			}
			case 129:
				break;
			case 25: {
				return tok(EXCL);
			}
			case 130:
				break;
			case 78: {
				return tok(FALSE);
			}
			case 131:
				break;
			case 11: {
				return tok(LBRACKET);
			}
			case 132:
				break;
			case 37: {
				return tok(LITERAL_FLOAT, new Double(yytext()));
			}
			case 133:
				break;
			case 41: {
				return tok(FOLLOW);
			}
			case 134:
				break;
			case 72: {
				fromStringChar();
				return tok(LITERAL_CHAR, new Character('\r'));
			}
			case 135:
				break;
			case 74: {
				fromStringChar();
				return tok(LITERAL_CHAR, new Character('\b'));
			}
			case 136:
				break;
			case 30: {
				sb.append(yytext());
				rawsb.append(yytext());
			}
			case 137:
				break;
			case 61: {
				fromStringChar();
				reportError("Too many characters in character literal");
				return tok(LITERAL_CHAR, new Character((char) 0));
			}
			case 138:
				break;
			case 2: {
				return tok(IDENT, yytext());
			}
			case 139:
				break;
			case 9: {
				return tok(LCURLY);
			}
			case 140:
				break;
			case 52: {
				sb.append('\"');
				rawsb.append(yytext());
			}
			case 141:
				break;
			case 75: {
				return tok(LITERAL_INT, new Long(parseLong(2, yylength() - 1,
						16)));
			}
			case 142:
				break;
			case 67: {
				fromStringChar();
				return tok(LITERAL_CHAR, new Character('\"'));
			}
			case 143:
				break;
			case 32: {
				fromStringChar();
				return strtok(sb.toString());
			}
			case 144:
				break;
			case 77: {
				return tok(TRUE);
			}
			case 145:
				break;
			case 68: {
				fromStringChar();
				return tok(LITERAL_CHAR, new Character('\''));
			}
			case 146:
				break;
			case 69: {
				fromStringChar();
				return tok(LITERAL_CHAR, new Character('\\'));
			}
			case 147:
				break;
			case 76: {
				return tok(NULL);
			}
			case 148:
				break;
			case 59: {
				sb.append('\b');
				rawsb.append(yytext());
			}
			case 149:
				break;
			case 13: {
				return tok(PLUS);
			}
			case 150:
				break;
			case 36: {
				return tok(LITERAL_INT, new Integer((int) parseLong(0,
						yylength(), 8)));
			}
			case 151:
				break;
			case 12: {
				return tok(RBRACKET);
			}
			case 152:
				break;
			case 21: {
				return tok(CAR);
			}
			case 153:
				break;
			case 62: {
				return tok(LITERAL_INT, new Long(
						parseLong(0, yylength() - 1, 8)));
			}
			case 154:
				break;
			case 6: {
				return tok(MINUS);
			}
			case 155:
				break;
			case 3: {
			}
			case 156:
				break;
			default:
				if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
					zzAtEOF = true;
					switch (zzLexicalState) {
					case STRING: {
						reportError("Unterminated string at end of file");
						fromStringChar();
						return strtok(sb.toString());
					}
					case 172:
						break;
					case CHAR: {
						fromStringChar();
						reportError("Unterminated character literal at end of file");
						return tok(LITERAL_CHAR, new Character((char) 0));
					}
					case 173:
						break;
					default: {
						return new Token(Sym.EOF, yyline, yycolumn);
					}
					}
				} else {
					zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}

}
